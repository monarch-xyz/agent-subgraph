// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class MarketConfigured extends ethereum.Event {
  get params(): MarketConfigured__Params {
    return new MarketConfigured__Params(this);
  }
}

export class MarketConfigured__Params {
  _event: MarketConfigured;

  constructor(event: MarketConfigured) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get marketId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get cap(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RebalancerSet extends ethereum.Event {
  get params(): RebalancerSet__Params {
    return new RebalancerSet__Params(this);
  }
}

export class RebalancerSet__Params {
  _event: RebalancerSet;

  constructor(event: RebalancerSet) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rebalancer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MonarchAgent extends ethereum.SmartContract {
  static bind(address: Address): MonarchAgent {
    return new MonarchAgent("MonarchAgent", address);
  }

  marketCap(user: Address, marketId: Bytes): BigInt {
    let result = super.call(
      "marketCap",
      "marketCap(address,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromFixedBytes(marketId),
      ],
    );

    return result[0].toBigInt();
  }

  try_marketCap(user: Address, marketId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "marketCap",
      "marketCap(address,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromFixedBytes(marketId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  morphoBlue(): Address {
    let result = super.call("morphoBlue", "morphoBlue():(address)", []);

    return result[0].toAddress();
  }

  try_morphoBlue(): ethereum.CallResult<Address> {
    let result = super.tryCall("morphoBlue", "morphoBlue():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data),
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  rebalancers(user: Address): Address {
    let result = super.call("rebalancers", "rebalancers(address):(address)", [
      ethereum.Value.fromAddress(user),
    ]);

    return result[0].toAddress();
  }

  try_rebalancers(user: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rebalancers",
      "rebalancers(address):(address)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _morphoBlue(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AuthorizeCall extends ethereum.Call {
  get inputs(): AuthorizeCall__Inputs {
    return new AuthorizeCall__Inputs(this);
  }

  get outputs(): AuthorizeCall__Outputs {
    return new AuthorizeCall__Outputs(this);
  }
}

export class AuthorizeCall__Inputs {
  _call: AuthorizeCall;

  constructor(call: AuthorizeCall) {
    this._call = call;
  }

  get rebalancer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AuthorizeCall__Outputs {
  _call: AuthorizeCall;

  constructor(call: AuthorizeCall) {
    this._call = call;
  }
}

export class BatchConfigMarketsCall extends ethereum.Call {
  get inputs(): BatchConfigMarketsCall__Inputs {
    return new BatchConfigMarketsCall__Inputs(this);
  }

  get outputs(): BatchConfigMarketsCall__Outputs {
    return new BatchConfigMarketsCall__Outputs(this);
  }
}

export class BatchConfigMarketsCall__Inputs {
  _call: BatchConfigMarketsCall;

  constructor(call: BatchConfigMarketsCall) {
    this._call = call;
  }

  get marketIds(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get caps(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class BatchConfigMarketsCall__Outputs {
  _call: BatchConfigMarketsCall;

  constructor(call: BatchConfigMarketsCall) {
    this._call = call;
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class RebalanceCall extends ethereum.Call {
  get inputs(): RebalanceCall__Inputs {
    return new RebalanceCall__Inputs(this);
  }

  get outputs(): RebalanceCall__Outputs {
    return new RebalanceCall__Outputs(this);
  }
}

export class RebalanceCall__Inputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }

  get onBehalf(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get fromMarkets(): Array<RebalanceCallFromMarketsStruct> {
    return this._call.inputValues[2].value.toTupleArray<RebalanceCallFromMarketsStruct>();
  }

  get toMarkets(): Array<RebalanceCallToMarketsStruct> {
    return this._call.inputValues[3].value.toTupleArray<RebalanceCallToMarketsStruct>();
  }
}

export class RebalanceCall__Outputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }
}

export class RebalanceCallFromMarketsStruct extends ethereum.Tuple {
  get market(): RebalanceCallFromMarketsMarketStruct {
    return changetype<RebalanceCallFromMarketsMarketStruct>(this[0].toTuple());
  }

  get assets(): BigInt {
    return this[1].toBigInt();
  }

  get shares(): BigInt {
    return this[2].toBigInt();
  }
}

export class RebalanceCallFromMarketsMarketStruct extends ethereum.Tuple {
  get loanToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get oracle(): Address {
    return this[2].toAddress();
  }

  get irm(): Address {
    return this[3].toAddress();
  }

  get lltv(): BigInt {
    return this[4].toBigInt();
  }
}

export class RebalanceCallToMarketsStruct extends ethereum.Tuple {
  get market(): RebalanceCallToMarketsMarketStruct {
    return changetype<RebalanceCallToMarketsMarketStruct>(this[0].toTuple());
  }

  get assets(): BigInt {
    return this[1].toBigInt();
  }

  get shares(): BigInt {
    return this[2].toBigInt();
  }
}

export class RebalanceCallToMarketsMarketStruct extends ethereum.Tuple {
  get loanToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get oracle(): Address {
    return this[2].toAddress();
  }

  get irm(): Address {
    return this[3].toAddress();
  }

  get lltv(): BigInt {
    return this[4].toBigInt();
  }
}

export class RevokeCall extends ethereum.Call {
  get inputs(): RevokeCall__Inputs {
    return new RevokeCall__Inputs(this);
  }

  get outputs(): RevokeCall__Outputs {
    return new RevokeCall__Outputs(this);
  }
}

export class RevokeCall__Inputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }
}

export class RevokeCall__Outputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }
}

export class SetMorphoAuthorizationCall extends ethereum.Call {
  get inputs(): SetMorphoAuthorizationCall__Inputs {
    return new SetMorphoAuthorizationCall__Inputs(this);
  }

  get outputs(): SetMorphoAuthorizationCall__Outputs {
    return new SetMorphoAuthorizationCall__Outputs(this);
  }
}

export class SetMorphoAuthorizationCall__Inputs {
  _call: SetMorphoAuthorizationCall;

  constructor(call: SetMorphoAuthorizationCall) {
    this._call = call;
  }

  get authorization(): SetMorphoAuthorizationCallAuthorizationStruct {
    return changetype<SetMorphoAuthorizationCallAuthorizationStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get signature(): SetMorphoAuthorizationCallSignatureStruct {
    return changetype<SetMorphoAuthorizationCallSignatureStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }
}

export class SetMorphoAuthorizationCall__Outputs {
  _call: SetMorphoAuthorizationCall;

  constructor(call: SetMorphoAuthorizationCall) {
    this._call = call;
  }
}

export class SetMorphoAuthorizationCallAuthorizationStruct extends ethereum.Tuple {
  get authorizer(): Address {
    return this[0].toAddress();
  }

  get authorized(): Address {
    return this[1].toAddress();
  }

  get isAuthorized(): boolean {
    return this[2].toBoolean();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }

  get deadline(): BigInt {
    return this[4].toBigInt();
  }
}

export class SetMorphoAuthorizationCallSignatureStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}
